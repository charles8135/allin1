
# [普通] 设置worker进程的用户和用户组
# user www www;

# [普通] worker_processes的数目应该不多于服务器的CPU的核数目,
# 每个CPU核超过1个worker不会使得Nginx性能有什么提升

## __sensitive__
worker_processes  12;

# [性能] 给Nginx使用的文件描述符的数目.这个需要一起设置系统内核参数'ulimit -n 200000'
# 或修改'/etc/security/limits.conf', 参考《高负载Linux调优》
# 当默认的connections 1024不够用时，需要增加connection，就需要增加此配置项
# worker_rlimit_nofile 200000;

# [普通] 设定每个worker进程最多可以服务多少客户端,
# Max clients = worker_connections * worker_processes
events {
    use epoll;
    worker_connections  1024;
}

http {
    include  mime.types;
    default_type  application/octet-stream;
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" "$http_cookie" "$request_time"';

    # [性能] 使用sendfile从Linux内核中的一个文件描述符(FD)拷贝数据到另一个文件描述符比read() + write()更有效率,
    # 因为read() + write()的方式需要在用户空间(user space)来回传输数据
    sendfile  on;

    # [普通] keep alive连接的超时时间.服务器在这个超时时间之后会关闭这个连接
    keepalive_timeout  30;

    # [普通] 下述错误码，均重定向到错误页面
    error_page 400 401 403 404 500 501 502 503 504 505  http://www.baidu.com/search/error.html;

    # [安全] 隐藏Nginx版本号
    server_tokens  off;

    # [普通] 
    # 客户端请求body体最大, 目的是支持大文件上传
    client_max_body_size  15m;
    # 调整请求头长度限制, 400 Bad request很多情况是因为该参数过小引起
    client_header_buffer_size 16k;
    large_client_header_buffers 4 16k;

    # [性能] gzip压缩相关
    gzip  on;
    gzip_min_length  1k;
    gzip_buffers  4  16k;
    gzip_http_version  1.0;
    gzip_comp_level  2;
    gzip_types  text/plain  application/x-javascript  text/css  text/javascript;

    # 上述是基本配置，具体的网站配置，将在$NGINX/conf/sites目录下进行具体配置
    include sites/*.conf;

}
